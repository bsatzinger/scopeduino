//GLScopeMac.java
//GUI For Oscilloscope Functions


//Based on (GPL) Java OpenGL examples from
//http://plugins.netbeans.org/PluginPortal/faces/PluginDetailPage.jsp?pluginid=3260


//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License as
//published by the Free Software Foundation; either version 3 of the
//License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful, but
//WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//General Public License for more details:
//http://www.gnu.org/licenses/gpl.txt

//Copyright 2009 Brian Satzinger


package scopeduino.display;

import java.util.*;

import com.sun.opengl.util.Animator;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import serial.ScopeDAQ;



/**
 *
 * @author cylab
 * @author mbien
 */
public class GLScopeMac extends JFrame {

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    
    private Animator animator;
    GLRenderer rend;
    Refresher r;

    int oldx = -1;
    int oldy = -1;

    /** Creates new form MainFrame */
    public GLScopeMac() {
        initComponents();

      
        setTitle("Scopeduino");

        rend = new GLRenderer();

        canvas.addGLEventListener(rend);
        animator = new Animator(canvas);




        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());         
        
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show){
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(!show)
            animator.start();

        
        r = new Refresher(canvas);
        r.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new JPanel();
        canvas = new GLCanvas(createGLCapabilites());
        jSlider6 = new JSlider();
        jPanel1 = new JPanel();
        jTabbedPane1 = new JTabbedPane();
        ConnectionPanel = new JPanel();
        btnDetectSerial = new JButton();
        scrlSerialPorts = new JScrollPane();
        lstSerialPorts = new JList();
        btnConnect = new JButton();
        DisplayPanel = new JPanel();
        jLabel2 = new JLabel();
        sldBackground = new JSlider();
        jLabel1 = new JLabel();
        sldTTL = new JSlider();
        jLabel9 = new JLabel();
        sldAlpha = new JSlider();
        jCheckBox1 = new JCheckBox();
        jLabel4 = new JLabel();
        sldSectionWidth1 = new JSlider();
        sldSectionOffset = new JSlider();
        TriggerPanel = new JPanel();
        jSlider2 = new JSlider();
        jLabel3 = new JLabel();
        jCheckBox2 = new JCheckBox();
        jLabel8 = new JLabel();
        list2 = new java.awt.List();
        Ch1Panel = new JPanel();
        jCheckBox3 = new JCheckBox();
        jLabel5 = new JLabel();
        jSlider4 = new JSlider();
        jLabel6 = new JLabel();
        jSlider5 = new JSlider();
        jLabel7 = new JLabel();
        list1 = new java.awt.List();
        Ch2Panel = new JPanel();

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowActivated(WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        canvas.addMouseWheelListener(new MouseWheelListener() {
            public void mouseWheelMoved(MouseWheelEvent evt) {
                canvasMouseWheelMoved(evt);
            }
        });
        canvas.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });
        canvas.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnDetectSerial.setLabel("Detect Serial Ports");
        btnDetectSerial.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnDetectSerialMouseClicked(evt);
            }
        });
        btnDetectSerial.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDetectSerialActionPerformed(evt);
            }
        });

        lstSerialPorts.setModel(new AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scrlSerialPorts.setViewportView(lstSerialPorts);

        btnConnect.setText("Connect");
        btnConnect.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnConnectMouseClicked(evt);
            }
        });

        GroupLayout ConnectionPanelLayout = new GroupLayout(ConnectionPanel);
        ConnectionPanel.setLayout(ConnectionPanelLayout);
        ConnectionPanelLayout.setHorizontalGroup(
            ConnectionPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(ConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConnectionPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(scrlSerialPorts, GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(btnDetectSerial, GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(btnConnect, GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                .addContainerGap())
        );
        ConnectionPanelLayout.setVerticalGroup(
            ConnectionPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(ConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDetectSerial)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(scrlSerialPorts, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(btnConnect)
                .addContainerGap(253, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Connection", ConnectionPanel);

        DisplayPanel.setBorder(BorderFactory.createEtchedBorder());
        DisplayPanel.setLayout(new GridLayout(12, 1));

        jLabel2.setText(" Background:");
        DisplayPanel.add(jLabel2);

        sldBackground.setPaintTicks(true);
        sldBackground.setPaintTrack(false);
        sldBackground.setValue(0);
        sldBackground.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sldBackgroundStateChanged(evt);
            }
        });
        DisplayPanel.add(sldBackground);

        jLabel1.setText(" Time To Live:");
        DisplayPanel.add(jLabel1);

        sldTTL.setMaximum(1024);
        sldTTL.setMinimum(1);
        sldTTL.setValue(127);
        sldTTL.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                sldTTLMouseReleased(evt);
            }
        });
        sldTTL.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sldTTLStateChanged(evt);
            }
        });
        DisplayPanel.add(sldTTL);

        jLabel9.setText(" Alpha:");
        DisplayPanel.add(jLabel9);

        sldAlpha.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sldAlphaStateChanged(evt);
            }
        });
        DisplayPanel.add(sldAlpha);

        jCheckBox1.setText("Hard First Trace");
        jCheckBox1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });
        DisplayPanel.add(jCheckBox1);

        jLabel4.setText("Horizontal Scale:");
        DisplayPanel.add(jLabel4);

        sldSectionWidth1.setMaximum(768);
        sldSectionWidth1.setPaintTicks(true);
        sldSectionWidth1.setPaintTrack(false);
        sldSectionWidth1.setName("Time To Live"); // NOI18N
        sldSectionWidth1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sldSectionWidth1StateChanged(evt);
            }
        });
        sldSectionWidth1.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                sldSectionWidth1PropertyChange(evt);
            }
        });
        DisplayPanel.add(sldSectionWidth1);

        sldSectionOffset.setMaximum(768);
        sldSectionOffset.setPaintTicks(true);
        sldSectionOffset.setPaintTrack(false);
        sldSectionOffset.setName("Time To Live"); // NOI18N
        sldSectionOffset.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sldSectionOffsetStateChanged(evt);
            }
        });
        sldSectionOffset.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                sldSectionOffsetPropertyChange(evt);
            }
        });
        DisplayPanel.add(sldSectionOffset);

        jTabbedPane1.addTab("Display", DisplayPanel);

        jSlider2.setMaximum(255);
        jSlider2.setMinimum(1);
        jSlider2.setValue(127);
        jSlider2.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                jSlider2MouseReleased(evt);
            }
        });

        jLabel3.setText("Trigger Level");

        jCheckBox2.setText("Trigger Enabled");
        jCheckBox2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Trigger Source");

        GroupLayout TriggerPanelLayout = new GroupLayout(TriggerPanel);
        TriggerPanel.setLayout(TriggerPanelLayout);
        TriggerPanelLayout.setHorizontalGroup(
            TriggerPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(TriggerPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(TriggerPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jSlider2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(TriggerPanelLayout.createParallelGroup(Alignment.TRAILING, false)
                        .addComponent(list2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        TriggerPanelLayout.setVerticalGroup(
            TriggerPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(TriggerPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addGap(36, 36, 36)
                .addComponent(jSlider2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jCheckBox2)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(list2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Trigger", TriggerPanel);

        jCheckBox3.setText("Channel 1 Enable");
        jCheckBox3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Vertical Scale");

        jSlider4.setMaximum(255);
        jSlider4.setMinimum(1);
        jSlider4.setValue(127);
        jSlider4.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                jSlider4MouseReleased(evt);
            }
        });

        jLabel6.setText("Vertical Offset");

        jSlider5.setMaximum(255);
        jSlider5.setMinimum(1);
        jSlider5.setValue(127);
        jSlider5.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                jSlider5MouseReleased(evt);
            }
        });

        jLabel7.setText("Color");

        GroupLayout Ch1PanelLayout = new GroupLayout(Ch1Panel);
        Ch1Panel.setLayout(Ch1PanelLayout);
        Ch1PanelLayout.setHorizontalGroup(
            Ch1PanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Ch1PanelLayout.createSequentialGroup()
                .addGroup(Ch1PanelLayout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(Alignment.LEADING, Ch1PanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(list1, GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                    .addGroup(Alignment.LEADING, Ch1PanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(Ch1PanelLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jCheckBox3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)))
                    .addGroup(Alignment.LEADING, Ch1PanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(Ch1PanelLayout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(jSlider5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        Ch1PanelLayout.setVerticalGroup(
            Ch1PanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Ch1PanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jCheckBox3)
                .addGap(38, 38, 38)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addComponent(jSlider4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addComponent(jSlider5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel7)
                .addGap(20, 20, 20)
                .addComponent(list1, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ch1", Ch1Panel);

        GroupLayout Ch2PanelLayout = new GroupLayout(Ch2Panel);
        Ch2Panel.setLayout(Ch2PanelLayout);
        Ch2PanelLayout.setHorizontalGroup(
            Ch2PanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 282, Short.MAX_VALUE)
        );
        Ch2PanelLayout.setVerticalGroup(
            Ch2PanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Ch2", Ch2Panel);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSlider6, GroupLayout.PREFERRED_SIZE, 0, GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(396, 396, 396)
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, GroupLayout.PREFERRED_SIZE, 287, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(jSlider6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jTabbedPane1, 0, 0, Short.MAX_VALUE)
                            .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Connection");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

            //rend.rotate = !rend.rotate;


    }//GEN-LAST:event_formMouseClicked

    private void sldBackgroundStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sldBackgroundStateChanged
        int color = sldBackground.getValue();

        float colorf =((float) color) / (100.0f);

        ScopeSettings.backb = colorf;
        ScopeSettings.backg = colorf;
        ScopeSettings.backr = colorf;
    }//GEN-LAST:event_sldBackgroundStateChanged

    private void jCheckBox1StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        ScopeSettings.hardFirstTrace = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1StateChanged

    private void canvasMouseDragged(MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        // TODO add your handling code here:
        if ((oldx == -1) || (oldy == -1))
        {
            oldx = evt.getX();
            oldy = evt.getY();
            return;
        }

        int dx = evt.getX() - oldx;
        int dy = oldy - evt.getY();


        oldx = evt.getX();
        oldy = evt.getY();

        rend.translate(dx, dy, 0);
    }//GEN-LAST:event_canvasMouseDragged

    private void canvasMouseReleased(MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        //Mouse drag ended
        oldx = -1;
        oldy = -1;
    }//GEN-LAST:event_canvasMouseReleased

    private void canvasMouseWheelMoved(MouseWheelEvent evt) {//GEN-FIRST:event_canvasMouseWheelMoved
        int dz =  -1 * evt.getWheelRotation();

        rend.translate(0, 0, dz);
    }//GEN-LAST:event_canvasMouseWheelMoved

    private void btnDetectSerialActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDetectSerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDetectSerialActionPerformed

    private void btnDetectSerialMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnDetectSerialMouseClicked
        Vector<String> ports = rend.arduino.getPorts();

        lstSerialPorts.setListData(ports);

    }//GEN-LAST:event_btnDetectSerialMouseClicked

    private void btnConnectMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnConnectMouseClicked
        String portname = (String)lstSerialPorts.getSelectedValue();
        
        System.out.println(portname);

        try
        {
            rend.arduino.connect(portname);
        }
        catch (Exception e)
        {
            System.err.println("Couldn't Connect: " + e);
        }

        rend.startTraceReader();
       

    }//GEN-LAST:event_btnConnectMouseClicked

    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    private void jSlider2MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jSlider2MouseReleased
        int val = jSlider2.getValue();

        System.out.println("Sample Slider: " + val);

        byte[] command = new byte[2];

        command[0] = 'c';
        command[1] = (byte) val;

        rend.reader.commandQueue.add(command);
    }//GEN-LAST:event_jSlider2MouseReleased

    private void jCheckBox2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void sldTTLMouseReleased(MouseEvent evt) {//GEN-FIRST:event_sldTTLMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_sldTTLMouseReleased

    private void jSlider4MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jSlider4MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider4MouseReleased

    private void jSlider5MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jSlider5MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider5MouseReleased

    private void sldSectionWidth1StateChanged(ChangeEvent evt) {//GEN-FIRST:event_sldSectionWidth1StateChanged
        rend.horizontalWindow = sldSectionWidth1.getValue();
    }//GEN-LAST:event_sldSectionWidth1StateChanged

    private void sldSectionWidth1PropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_sldSectionWidth1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_sldSectionWidth1PropertyChange

    private void sldSectionOffsetStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sldSectionOffsetStateChanged
        rend.horizontalOffset = sldSectionOffset.getValue();
    }//GEN-LAST:event_sldSectionOffsetStateChanged

    private void sldSectionOffsetPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_sldSectionOffsetPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_sldSectionOffsetPropertyChange

    private void sldAlphaStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sldAlphaStateChanged
        Trace.alpha = (float) sldAlpha.getValue() / (100.0f);
    }//GEN-LAST:event_sldAlphaStateChanged

    private void sldTTLStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sldTTLStateChanged
        Trace.TTL = sldTTL.getValue();
    }//GEN-LAST:event_sldTTLStateChanged

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {

                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                GLScopeMac frame = new GLScopeMac();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel Ch1Panel;
    private JPanel Ch2Panel;
    private JPanel ConnectionPanel;
    private JPanel DisplayPanel;
    private JPanel TriggerPanel;
    private JButton btnConnect;
    private JButton btnDetectSerial;
    private GLCanvas canvas;
    private JCheckBox jCheckBox1;
    private JCheckBox jCheckBox2;
    private JCheckBox jCheckBox3;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel4;
    private JSlider jSlider2;
    private JSlider jSlider4;
    private JSlider jSlider5;
    private JSlider jSlider6;
    private JTabbedPane jTabbedPane1;
    private java.awt.List list1;
    private java.awt.List list2;
    private JList lstSerialPorts;
    private JScrollPane scrlSerialPorts;
    private JSlider sldAlpha;
    private JSlider sldBackground;
    private JSlider sldSectionOffset;
    private JSlider sldSectionWidth1;
    private JSlider sldTTL;
    // End of variables declaration//GEN-END:variables

}
